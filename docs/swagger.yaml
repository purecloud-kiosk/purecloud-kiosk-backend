  swagger: "2.0"
  info:
    version: "0.0.0"
    title: "PureCloud Kiosk API"
    description : "API Documentation for the PureCloud Kiosk Service."
  tags:
    -
      name : "purecloud"
      description : "Routes for working with the PureCloud API."
    -
      name : "events"
      description : "Routes for managing events."
    -
      name : "stats"
      description : "Routes for retrieving statistics."
  paths:
    /purecloud/login:
      post:
        tags :
          - "purecloud"
        description: "Route used for logging into the PureCloud Kiosk System. This is only here for testing and will be removed soon."
        parameters:
          -
            name: "Login Credentials"
            in: "body"
            description: "Login Credentials"
            required: true
            schema:
              $ref : "#/definitions/LoginBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/LoginResult"
    /purecloud/searchPeople:
      get:
        tags :
          - "purecloud"
        description: "Route used for searching the PureCloud People Directory."
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "q"
            in: "query"
            description: "Query"
            required: false
            type: "string"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit to"
            required: false
            type: "string"
          -
            name: "offset"
            in: "query"
            description: "Number of results to offset by"
            required: false
            type: "string"
        responses:
          200:
            description : "Successful Response"
            schema :
              $ref : "#/definitions/CheckIn"
    /purecloud/myQrCode:
      get:
        tags :
          - "purecloud"
        description: "Route used for retrieving a QRCode for a user. Access token is passed through the query params instead of the Authorization header because it easier to retrieve images. The url can just be placed in an `<img>` tag."
        parameters:
          -
            name: "access_token"
            in: "query"
            description: "Access Token needed for authentication. If the user is not authenticated, this request will fail."
            required: true
            type: "string"
    /events/create:
      post:
        tags :
          - "events"
        description: "Creates an event. \n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name : "event"
            in : "body"
            description : "Event Data"
            required : true
            schema :
              $ref : "#/definitions/CreateEventBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventCreatedResponse"
    /events/update:
      post:
        tags :
          - "events"
        description: "Updates an event. All parameters must be specified to successfully update an event.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed to authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          - name : "updated event"
            in : "body"
            description : "Updated Event Information and EventID"
            required : true
            schema :
              $ref : "#/definitions/UpdateEventBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventUpdatedResponse"
    /events/remove:
      post:
        tags :
          - "events"
        description: "Updates an event. All parameters must be specified to successfully update an event.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed to authenticate with. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name : "eventID"
            in : "body"
            description : "ID of event to remove"
            schema :
              $ref : "#/definitions/RemoveEventBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventRemovedResponse"
    /events/addPrivateAttendee:
      post:
        tags :
          - "events"
        description: "This route will add an attendee to a private event. If the event is not private, the request will fail.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed to authenticate with. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name : "body"
            in : "body"
            description : "Data needed to add a user to a private event."
            schema :
              $ref : "#/definitions/AttendeeBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventRemovedResponse"
    /events/addEventManager:
      post:
        tags :
          - "events"
        description: "This route will add an attendee to a private event. If the event is not private, the request will fail.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed to authenticate with. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name : "body"
            in : "body"
            description : "Data needed to add a user to a private event."
            schema :
              $ref : "#/definitions/ManagerBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventRemovedResponse"
    /events/checkIn:
      post:
        tags :
          - "events"
        description: "This route will check a user into an event. If the event is private and the user is not listed as an attendee of the event, the check-in will fail. If the event is public, the check-in will pass as long as the user is part of the organization.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed to authenticate with. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name : "body"
            in : "body"
            description : "Data needed to check a user into an event. The checkIn's timestamp should be the currentTime in milliseconds."
            schema :
              $ref : "#/definitions/CheckInBody"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref : "#/definitions/EventRemovedResponse"
    /events/managing:
      get:
        tags :
          - "events"
        description: "Retrieves all events that the user is managing. Use the limit and page fields for pagination if needed. For example, `limit = 25` and `page = 0` will retrieve the first 25 results. `limit = 25` and `page = 1` will retrieve the next 25 results.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit. Defaults to 25."
            required: false
            type: "number"
          -
            name: "page"
            in: "query"
            description: "'Page' to grab, defaults to `0`"
            required: false
            type: "string"
          -
            name: "upcoming"
            in: "query"
            description: "Whether to grab only upcoming events. Defaults to true"
            required: false
            type: "boolean"
        responses:
          200:
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/Event"
    /events/public:
      get:
        tags :
          - "events"
        description: "Retrieves all public events within the user's organization. Use the limit and page fields for pagination if needed. For example, `limit = 25` and `page = 0` will retrieve the first 25 results. `limit = 25` and `page = 1` will retrieve the next 25 results.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit. Defaults to 25."
            required: false
            type: "number"
          -
            name: "page"
            in: "query"
            description: "'Page' to grab, defaults to `0`"
            required: false
            type: "string"
          -
            name: "upcoming"
            in: "query"
            description: "Whether to grab only upcoming events. Defaults to true"
            required: false
            type: "boolean"
        responses:
          "200":
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/Event"
    /events/private:
      get:
        tags :
          - "events"
        description: "Retrieves private events a user has access to. Use the limit and page fields for pagination if needed. For example, `limit = 25` and `page = 0` will retrieve the first 25 results. `limit = 25` and `page = 1` will retrieve the next 25 results.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit. Defaults to 25."
            required: false
            type: "number"
          -
            name: "page"
            in: "query"
            description: "'Page' to grab, defaults to `0`"
            required: false
            type: "string"
          -
            name: "upcoming"
            in: "query"
            description: "Whether to grab only upcoming events. Defaults to true"
            required: false
            type: "boolean"
        responses:
          "200":
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/Event"
    /events/getEventCheckIns:
      get:
        tags :
          - "events"
        description: "Retrieves all checked-in users of an event. Use the limit and page fields for pagination if needed. For example, `limit = 25` and `page = 0` will retrieve the first 25 results. `limit = 25` and `page = 1` will retrieve the next 25 results.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "eventID"
            in: "query"
            description: "ID of event"
            required: true
            type: "string"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit. Defaults to 25."
            required: false
            type: "number"
          -
            name: "page"
            in: "query"
            description: "'Page' to grab, defaults to `0`"
            required: false
            type: "string"
        responses:
          200:
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/CheckIn"
    /events/search:
      get:
        tags:
          - "events"
        description: "Searches the events in the database. This route will first search for events associated with a user (either he or she is managing the event, has been invited to the event, or has been checked into the event. Set private to false to search all public events in the org. Use the limit and page fields for pagination if needed.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "q"
            in: "query"
            description: "The query."
            required: false
            type: "number"
          -
            name: "limit"
            in: "query"
            description: "Number of results to limit. Defaults to 25."
            required: false
            type: "number"
          -
            name: "page"
            in: "query"
            description: "'Page' to grab, defaults to `0`"
            required: false
            type: "string"
          -
            name: "private"
            in : "query"
            description: "Optional field use to specify if only private or public events should be shown. Returns only private events if set to true, public events only if false."
            required : false
            type : "boolean"
          -
            name: "upcoming"
            in: "query"
            description: "Whether to grab only upcoming events. Defaults to true. Set to false to include previous events."
            required: false
            type: "boolean"
          -
            name: "managing"
            in: "query"
            description: "Whether to grab only managed events or not. Defaults to false."
            required: false
            type: "boolean"
          -
            name: "sortOrder"
            in: "query"
            description: "Order events are given. Accepted values are 'asc' (ascending) and 'desc' (descending). Defaults to 'asc'."
            required: false
            type: "string"
        responses:
          200:
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/Event"
    # /events/uploadImage:
    #   post:
    #     tags :
    #       - "events"
    #     description: "Uploads an image that will be associated with an event\n"
    #     parameters:
    #       -
    #         name: "Authorization"
    #         in: "header"
    #         description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
    #         required: true
    #         type: "string"
    #       -
    #         name: "eventID"
    #         in: "query"
    #         description: "ID of event"
    #         required: true
    #         type: "string"
    #       -
    #         name: "file"
    #         in : "formData"
    #         description : "The file to be uploaded"
    #         required : true
    #         type : "file"
    #     responses:
    #       200:
    #         description: "Successful response"
    #         schema:
    #           type : "array"
    #           items:
    #             $ref : "#/definitions/CheckIn"
    /stats/me:
      get:
        tags :
          - "stats"
        description: "Retrieves statistics and basic information on user making the request.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
        responses:
          200:
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/CheckIn"
    /stats/event:
      get:
        tags :
          - "stats"
        description: "Retrieves statistics and other information about the event.\n"
        parameters:
          -
            name: "Authorization"
            in: "header"
            description: "Access Token needed for authentication. Format:  `bearer <authToken>`"
            required: true
            type: "string"
          -
            name: "eventID"
            in: "query"
            description: "The ID of the event"
            required: true
            type : "string"
        responses:
          200:
            description: "Successful response"
            schema:
              type : "array"
              items:
                $ref : "#/definitions/CheckIn"
  definitions:
    LoginBody :
      required:
        - email
        - password
      properties :
        email :
          type : "string"
        password :
          type : "string"
    CreateEventBody:
      required :
        - title
        - date
        - location
        - description
        - private
      properties :
        title:
          type : "string"
        date:
          type : "number"
        location:
          type : "string"
        imageUrl:
          type : "string"
        thumbnailUrl:
          type : "string"
        private:
          type : "boolean"
        description:
          type : "string"
    UpdateEventBody:
      required :
        - eventID
        - title
        - date
        - location
        - description
        - imageUrl
        - private
        - thumbnailUrl
      properties :
        eventID :
          type : "string"
        title:
          type : "string"
        date:
          type : "number"
        location:
          type : "string"
        imageUrl:
          type : "string"
        thumbnailUrl:
          type : "string"
        private:
          type : "boolean"
        description:
          type : "string"
    RemoveEventBody:
      required :
        - eventID
      properties :
        eventID :
          type : "string"
    Event:
      properties :
        title:
          type : "string"
        date:
          type : "number"
          format : "date"
        location:
          type : "string"
        orgGuid:
          type : "string"
        _id:
          type : "string"
        imageUrl:
          type : "string"
        thumbnailUrl:
          type : "string"
        private:
          type : "boolean"
        description:
          type : "string"
    CheckInBody:
      required:
        - eventID
        - checkIn
      properties:
        eventID:
          type : "string"
        checkIn:
          properties:
            personID:
              type : "string"
            name:
              type : "string"
            orgGuid :
              type : "string"
            timestamp :
              type : "number"
            image :
              type : "string"
    AttendeeBody:
      required:
        - eventID
        - attendee
      properties:
        eventID:
          type : "string"
        attendee:
          properties:
            personID:
              type : "string"
            name:
              type : "string"
            orgGuid :
              type : "string"
            image:
              type : "string"
    ManagerBody:
      required:
        - eventID
        - checkIn
      properties:
        eventID:
          type : "string"
        manager:
          properties:
            personID:
              type : "string"
            name:
              type : "string"
            orgGuid :
              type : "string"
            image :
              type : "string"
    RemoveCheckInBody:
      required:
        - eventID
        - personID
      properties:
        eventID:
          type : "string"
        personID :
          type : "string"
    CheckIn:
      properties:
        personID:
          type : "string"
        name:
          type : "string"
        orgGuid:
          type : "string"
        timestamp:
          type : "string"
        checkedIn:
          type : "boolean"
        image:
          type : "string"
    LoginResult :
      properties:
        ms:
          type : "number"
        res:
          type : "object"
          properties :
            X-OrgBook-Auth-Key :
              type : "string"
    EventCreatedResponse:
      properties:
        event:
          properties :
            title:
              type : "string"
            date:
              type : "number"
            location:
              type : "string"
            orgGuid:
              type : "string"
            _id:
              type : "string"
            imageUrl:
              type : "string"
            thumbnailUrl:
              type : "string"
            private:
              type : "boolean"
            description:
              type : "string"
        check_in:
          properties:
            personID:
              type : "string"
            name:
              type : "string"
            orgGuid:
              type : "string"
            timestamp:
              type : "string"
            checkedIn:
              type : "boolean"
            image:
              type : "string"
    EventUpdatedResponse:
      properties:
        res :
          type : "string"
    EventRemovedResponse:
      properties:
        res :
          type : "string"
